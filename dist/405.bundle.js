"use strict";(self.webpackChunksparemymac=self.webpackChunksparemymac||[]).push([[405],{405:(e,t,a)=>{a.r(t),a.d(t,{YoutubeTranscript:()=>p,YoutubeTranscriptDisabledError:()=>l,YoutubeTranscriptError:()=>s,YoutubeTranscriptNotAvailableError:()=>u,YoutubeTranscriptNotAvailableLanguageError:()=>d,YoutubeTranscriptTooManyRequestError:()=>i,YoutubeTranscriptVideoUnavailableError:()=>c});const r=/(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/i,n="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36,gzip(gfe)",o=/<text start="([^"]*)" dur="([^"]*)">([^<]*)<\/text>/g;class s extends Error{constructor(e){super(`[YoutubeTranscript] ðŸš¨ ${e}`)}}class i extends s{constructor(){super("YouTube is receiving too many requests from this IP and now requires solving a captcha to continue")}}class c extends s{constructor(e){super(`The video is no longer available (${e})`)}}class l extends s{constructor(e){super(`Transcript is disabled on this video (${e})`)}}class u extends s{constructor(e){super(`No transcripts are available for this video (${e})`)}}class d extends s{constructor(e,t,a){super(`No transcripts are available in ${e} this video (${a}). Available languages: ${t.join(", ")}`)}}class p{static fetchTranscript(e,t){var a,r,s,p,g;return r=this,s=void 0,g=function*(){const r=this.retrieveVideoId(e),s=yield fetch(`https://www.youtube.com/watch?v=${r}`,{headers:Object.assign(Object.assign({},(null==t?void 0:t.lang)&&{"Accept-Language":t.lang}),{"User-Agent":n})}),p=yield s.text(),g=p.split('"captions":');if(g.length<=1){if(p.includes('class="g-recaptcha"'))throw new i;if(!p.includes('"playabilityStatus":'))throw new c(e);throw new l(e)}const h=null===(a=(()=>{try{return JSON.parse(g[1].split(',"videoDetails')[0].replace("\n",""))}catch(e){return}})())||void 0===a?void 0:a.playerCaptionsTracklistRenderer;if(!h)throw new l(e);if(!("captionTracks"in h))throw new u(e);if((null==t?void 0:t.lang)&&!h.captionTracks.some((e=>e.languageCode===(null==t?void 0:t.lang))))throw new d(null==t?void 0:t.lang,h.captionTracks.map((e=>e.languageCode)),e);const v=((null==t?void 0:t.lang)?h.captionTracks.find((e=>e.languageCode===(null==t?void 0:t.lang))):h.captionTracks[0]).baseUrl,b=yield fetch(v,{headers:Object.assign(Object.assign({},(null==t?void 0:t.lang)&&{"Accept-Language":t.lang}),{"User-Agent":n})});if(!b.ok)throw new u(e);return[...(yield b.text()).matchAll(o)].map((e=>{var a;return{text:e[3],duration:parseFloat(e[2]),offset:parseFloat(e[1]),lang:null!==(a=null==t?void 0:t.lang)&&void 0!==a?a:h.captionTracks[0].languageCode}}))},new((p=void 0)||(p=Promise))((function(e,t){function a(e){try{o(g.next(e))}catch(e){t(e)}}function n(e){try{o(g.throw(e))}catch(e){t(e)}}function o(t){var r;t.done?e(t.value):(r=t.value,r instanceof p?r:new p((function(e){e(r)}))).then(a,n)}o((g=g.apply(r,s||[])).next())}))}static retrieveVideoId(e){if(11===e.length)return e;const t=e.match(r);if(t&&t.length)return t[1];throw new s("Impossible to retrieve Youtube video ID.")}}}}]);